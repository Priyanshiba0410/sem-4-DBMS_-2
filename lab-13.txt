
-------------------------------------------- Part – A (Use collection “Stock” created in Lab-12) --------------------------------------------


1. Create an index on the company field in the stocks collection.
db.stock.createIndex({ company: 1 });

 
2. Create a compound index on the sector and sales fields in the stocks collection. 
db.stock.createIndex({ sector: 1, sales: 1 });


3. List all the indexes created on the stocks collection. 
db.stock.getIndexes();


4. Drop an existing index on the company field from the stocks collection. 
db.stock.dropIndex({ company: 1 });


5. Use a cursor to retrieve and iterate over documents in the stocks collection, displaying each document. 
var cursor_stock = db.stock.find();

6. Limit the number of documents returned by a cursor to the first 3 documents in the stocks collection. 
var cursor_3 = db.stock.find().limit(3);


7. Sort the documents returned by a cursor in descending order based on the sales field. 
var cursor_sales = db.stock.find().sort({ sales: -1 });


8. Skip the first 2 documents in the result set and return the next documents using the cursor. 
var cursor_doc = db.stock.find().skip(2);


9. Convert the cursor to an array and return all documents from the stocks collection. 
var cursor_array = db.stock.find().toarray()

10. Create a collection named "Companies" with schema validation to ensure that each document must contains a company field (string) and a sector field (string). 
db.createcollection("companies",
{
   validator:{
	$jsonschema:{
	   bsonType:"object";
	   required:["company","sector"],
	   properties:{
			company:{bsonType:"String"},
			sector:{bsonType:"String"},
			}
		}	
	}
})


-------------------------------------------- Part – B --------------------------------------------


1. Create a collection named "Scripts" with validation for fields like eps, pe, and roe to ensure that they 
are numbers and required/compulsory fields.
db.createCollection("Scripts", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: ["eps", "pe", "roe"],
         properties: {
            eps: {
               bsonType: "double",
               description: "must be a number and is required"
            },
            pe: {
               bsonType: "double",
               description: "must be a number and is required"
            },
            roe: {
               bsonType: "double",
               description: "must be a number and is required"
            }
         }
      }
   }
});



2. Create a collection named "Products" where each product has an embedded document for manufacturer details and a multivalued field for categories that stores an array of category names the product belongs to. 
 manufacturer details: The manufacturer will be an embedded document with fields like name, 
country, and establishedYear. 
 categories: The categories will be an array field that holds multiple values. (i.e. Electronics, 
Mobile, Smart Devices). 
db.createCollection("Products", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: ["manufacturer", "categories"],
         properties: {
            manufacturer: {
               bsonType: "object",
               required: ["name", "country", "establishedYear"],
               properties: {
                  name: {
                     bsonType: "string",
                  },
                  country: {
                     bsonType: "string",
                  },
                  establishedYear: {
                     bsonType: "int",
                  }
               }
            },
            categories: {
               bsonType: "array",
               items: {
                  bsonType: "string"
               },
            }
         }
      }
   }
});




-------------------------------------------- Part – C --------------------------------------------




1. Create a collection named “financial_Reports” that requires revenue (a positive number) but allows 
optional fields like expenses and netIncome (if provided, they should also be numbers). 
db.createCollection("financial_Reports", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: ["revenue"],
         properties: {
            revenue: {
               bsonType: "double",
               minimum: 0,
               exclusiveMinimum: true,
            },
            expenses: {
               bsonType: "double",
            },
            netIncome: {
               bsonType: "double",
            }
         }
      }
   }
});



2. Create a collection named "Student" where each student has name and address are embedded 
document and mobilenumber and emailaddress are multivalued field that stores an array of values. 

db.createCollection("Student", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: ["name", "address", "mobilenumber", "emailaddress"],
         properties: {
            name: {
               bsonType: "object",
               required: ["first", "last"],
               properties: {
                  first: {
                     bsonType: "string",
                  },
                  last: {
                     bsonType: "string",
                  }
               },
            },
            address: {
               bsonType: "object",
               required: ["street", "city", "state", "zip"],
               properties: {
                  street: {
                     bsonType: "string",
                  },
                  city: {
                     bsonType: "string",
                  },
                  state: {
                     bsonType: "string",
                  },
                  zip: {
                     bsonType: "string",
                  }
               },
            },
            mobilenumber: {
               bsonType: "array",
               items: {
                  bsonType: "string"
               },
            },
            emailaddress: {
               bsonType: "array",
               items: {
                  bsonType: "string"
               },
            }
         }
      }
   }
});

